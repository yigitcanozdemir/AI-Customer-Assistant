"""add flagged sessions table

Revision ID: f4a6e1ac7dfc
Revises: d956e8da649a
Create Date: 2025-10-27 15:37:13.437947

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f4a6e1ac7dfc'
down_revision: Union[str, Sequence[str], None] = 'd956e8da649a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('flagged_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('user_name', sa.String(), nullable=True),
    sa.Column('store', sa.String(), nullable=False),
    sa.Column('requires_human', sa.Boolean(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('is_context_relevant', sa.Boolean(), nullable=True),
    sa.Column('warning_message', sa.Text(), nullable=True),
    sa.Column('assessment_reasoning', sa.Text(), nullable=True),
    sa.Column('user_query', sa.Text(), nullable=False),
    sa.Column('assistant_response', sa.Text(), nullable=False),
    sa.Column('message_history', sa.JSON(), nullable=True),
    sa.Column('flagged_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('reviewed', sa.Boolean(), nullable=True),
    sa.Column('reviewed_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('reviewed_by', sa.String(), nullable=True),
    sa.Column('review_notes', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_flagged_sessions_reviewed'), 'flagged_sessions', ['reviewed'], unique=False)
    op.create_index(op.f('ix_flagged_sessions_session_id'), 'flagged_sessions', ['session_id'], unique=False)
    op.create_index(op.f('ix_flagged_sessions_user_id'), 'flagged_sessions', ['user_id'], unique=False)
    op.drop_index('embeddings_hnsw_idx', table_name='embeddings', postgresql_using='hnsw')
    op.create_unique_constraint(None, 'embeddings', ['id'])
    op.drop_index('faqs_hnsw_idx', table_name='faqs', postgresql_using='hnsw')
    op.create_unique_constraint(None, 'faqs', ['id'])
    op.create_unique_constraint(None, 'images', ['id'])
    op.create_unique_constraint(None, 'products', ['id'])
    op.create_unique_constraint(None, 'variants', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'variants', type_='unique')
    op.drop_constraint(None, 'products', type_='unique')
    op.drop_constraint(None, 'images', type_='unique')
    op.drop_constraint(None, 'faqs', type_='unique')
    op.create_index('faqs_hnsw_idx', 'faqs', ['embedding'], unique=False, postgresql_using='hnsw')
    op.drop_constraint(None, 'embeddings', type_='unique')
    op.create_index('embeddings_hnsw_idx', 'embeddings', ['embedding'], unique=False, postgresql_using='hnsw')
    op.drop_index(op.f('ix_flagged_sessions_user_id'), table_name='flagged_sessions')
    op.drop_index(op.f('ix_flagged_sessions_session_id'), table_name='flagged_sessions')
    op.drop_index(op.f('ix_flagged_sessions_reviewed'), table_name='flagged_sessions')
    op.drop_table('flagged_sessions')
    # ### end Alembic commands ###
